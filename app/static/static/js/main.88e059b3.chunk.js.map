{"version":3,"sources":["components/Task.js","components/TaskList.js","components/NewTaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","buttonClass","isComplete","className","onClick","setter","id","title","onUnregister","TaskList","taskListHTML","tasks","map","task","console","log","kDefaultFormData","description","NewTaskForm","useState","formData","setFormData","handleNewData","event","dataValue","target","value","dataField","name","newFormData","onSubmit","preventDefault","handleTaskSubmit","htmlFor","type","onChange","BASE_URL","convertFromApi","apiTask","is_complete","App","tasksData","setTasksData","useEffect","getAllTasks","axios","get","then","response","data","catch","error","newTaskData","post","newTask","err","ifComplete","patch","markCompleteApi","delete","removeTask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88e059b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Task.css';\n\nconst Task = (props) => {\n  // const [complete, setComplete] = useState(props.isComplete);\n  const buttonClass = props.isComplete ? 'tasks__item__toggle--completed' : '';\n\n  const handleTaskClicked = () => {\n    props.setter(props.id, props.isComplete);\n  };\n\n  const handleUnregister = () => {\n    props.onUnregister(props.id);\n  };\n\n  return (\n    <li className=\"tasks__item\">\n      <button\n        className={`tasks__item__toggle ${buttonClass}`}\n        onClick={handleTaskClicked}\n      >\n        {props.title}\n      </button>\n      <button className=\"tasks__item__remove button\" onClick={handleUnregister}>\n        x\n      </button>\n    </li>\n  );\n};\n\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  isComplete: PropTypes.bool.isRequired,\n  setter: PropTypes.func.isRequired,\n  onUnregister: PropTypes.func.isRequired,\n};\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\nimport './TaskList.css';\n\nconst TaskList = (props) => {\n  const taskListHTML = props.tasks.map((task) => {\n    console.log(task);\n    return (\n      <Task\n        key={task.id}\n        id={task.id}\n        title={task.title}\n        isComplete={task.isComplete}\n        setter={props.setter}\n        onUnregister={props.onUnregister}\n      />\n    );\n  });\n  return <ul className=\"tasks__list no-bullet\">{taskListHTML}</ul>;\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      isComplete: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  setter: PropTypes.func.isRequired,\n  onUnregister: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst kDefaultFormData = {\n  title: '',\n  description: '',\n};\n\nconst NewTaskForm = (props) => {\n  // const [title, setTitle] = useState('');\n  // const [description, setDescription] = useState('');\n\n  const [formData, setFormData] = useState(kDefaultFormData);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.handleTaskSubmit(formData);\n    setFormData(kDefaultFormData);\n  };\n\n  const handleNewData = (event) => {\n    const dataValue = event.target.value;\n    const dataField = event.target.name;\n\n    const newFormData = { ...formData, [dataField]: dataValue };\n    setFormData(newFormData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"title\">Task Title</label>\n        <input\n          type=\"type\"\n          id=\"title\"\n          name=\"title\"\n          value={formData.title}\n          onChange={handleNewData}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"description\">Task Description</label>\n        <input\n          type=\"type\"\n          id=\"description\"\n          name=\"description\"\n          value={formData.description}\n          onChange={handleNewData}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" value=\"Add Task\"></input>\n      </div>\n    </form>\n  );\n};\n\nNewTaskForm.propTypes = {\n  handleTaskSubmit: PropTypes.func.isRequired,\n};\n\nexport default NewTaskForm;\n","import React, { useEffect, useState } from 'react';\nimport TaskList from './components/TaskList.js';\nimport './App.css';\nimport axios from 'axios';\nimport NewTaskForm from './components/NewTaskForm.js';\n\nconst BASE_URL = 'http://localhost:5000';\n\n// convert tasks data from api so object key is IsComplete not is_complete\nconst convertFromApi = (apiTask) => {\n  const { description, id, is_complete: isComplete, title } = apiTask;\n  const newTask = { description, id, isComplete, title };\n  return newTask;\n};\n\n// get list of all tasks from api\nconst getAllTasksApi = () => {\n  return axios\n    .get(`${BASE_URL}/tasks`)\n    .then((response) => {\n      return response.data.map(convertFromApi);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nconst markCompleteApi = (id, isComplete) => {\n  const ifComplete = isComplete ? 'mark_complete' : 'mark_incomplete';\n\n  return axios\n    .patch(`${BASE_URL}/tasks/${id}/${ifComplete}`)\n    .then((response) => {\n      // console.log('marked complete or incomplete');\n      return convertFromApi(response.data.task);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nconst removeTask = (id) => {\n  return axios.delete(`${BASE_URL}/tasks/${id}`).catch((error) => {\n    console.log(error);\n  });\n};\n\nconst addNewTaskApi = (newTaskData) => {\n  return axios\n    .post(`${BASE_URL}/tasks`, newTaskData)\n    .then((response) => {\n      // console.log(response.data);\n      return convertFromApi(response.data.task);\n    })\n    .catch((error) => console.log(error));\n};\n\nconst App = () => {\n  const [tasksData, setTasksData] = useState([]);\n\n  // call getAllTasksApi and set tasksData with setTasksData\n  useEffect(() => {\n    getAllTasks();\n  }, []);\n\n  const getAllTasks = () => {\n    return getAllTasksApi()\n      .then((tasks) => {\n        setTasksData(tasks);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const setTasksHandler = (id, isComplete) => {\n    // const task = tasksData.find((task) => task.id === id);\n\n    return markCompleteApi(id, !isComplete)\n      .then((newTask) => {\n        setTasksData((tasksData) => {\n          return tasksData.map((task) => {\n            if (newTask.id === task.id) {\n              return newTask;\n            } else {\n              return task;\n            }\n          });\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const unregisterTask = (id) => {\n    return removeTask(id)\n      .then(() => {\n        return getAllTasks();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    // setTasksData((tasksData) =>\n    //   tasksData.filter((task) => {\n    //     return task.id !== id;\n    //   })\n    // );\n  };\n\n  const handleTaskSubmit = (data) => {\n    addNewTaskApi(data)\n      .then((newTask) => {\n        // console.log(tasksData);\n        setTasksData([...tasksData, newTask]);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Ada&apos;s Task List</h1>\n      </header>\n      <main>\n        <div>\n          <NewTaskForm handleTaskSubmit={handleTaskSubmit} />\n          <TaskList\n            tasks={tasksData}\n            setter={setTasksHandler}\n            onUnregister={unregisterTask}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Add Foundation to index.js\nimport 'foundation-sites/dist/css/foundation.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}